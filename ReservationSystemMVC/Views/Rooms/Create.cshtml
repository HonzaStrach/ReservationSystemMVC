@using System.Globalization
@using System.Text.Json
@model Room

@{
    ViewData["Title"] = "Vytvoření nového pokoje";

    // Data for calendar
    var monthNamesJson = JsonSerializer.Serialize(CultureInfo.CurrentCulture.DateTimeFormat.MonthNames.Where(m => !string.IsNullOrEmpty(m)).ToArray());
    var currentYear = DateTime.Now.Year;
    var currentMonth = DateTime.Now.Month;
}

<div class="w3-container">
    <div class="w3-container w3-indigo">
        <h2>Vytvoření nového pokoje</h2>
    </div>

    @using (Html.BeginForm("Create", "Rooms", FormMethod.Post, new { @class = "w3-container" }))
    {
        @Html.AntiForgeryToken()

        <p>
            @Html.EditorFor(model => model.RoomNumber, new { htmlAttributes = new { @class = "w3-input" } })
            @Html.LabelFor(model => model.RoomNumber, new { @class = "w3-text-blue" })
            @Html.ValidationMessageFor(model => model.RoomNumber, "", new { @class = "w3-text-red" })
        </p>

        <p>
            @Html.LabelFor(model => model.RoomTypeId, new { @class = "w3-text-blue" })
            <a href="#" id="AddNewRoomType" class="w3-text-blue w3-right" style="text-decoration:none">Vytvořit nový typ pokoje</a>
            @Html.DropDownListFor(model => model.RoomTypeId, (SelectList)ViewData["RoomTypeId"], "Vyberte typ pokoje", new { @id = "RoomTypeId", @class = "w3-select w3-border" })
            @Html.ValidationMessageFor(model => model.RoomTypeId, "", new { @class = "w3-text-red" })
        </p>

        <p>
            @Html.EditorFor(model => model.MaxOccupancy, new { htmlAttributes = new { @class = "w3-input" } })
            @Html.LabelFor(model => model.MaxOccupancy, new { @class = "w3-text-blue" })
            @Html.ValidationMessageFor(model => model.MaxOccupancy, "", new { @class = "w3-text-red" })
        </p>

        <p>
            @Html.CheckBoxFor(model => model.ExtraBedAvailable, new { @class = "w3-check", @title = "Zvýší počet lůžek o 1" })
            @Html.LabelFor(model => model.ExtraBedAvailable, new { @class = "w3-text-blue" })
            @Html.ValidationMessageFor(model => model.ExtraBedAvailable, "", new { @class = "w3-text-red" })
        </p>

        <p>
            <button id="EquipmentButton" class="w3-button w3-block w3-light-blue w3-left-align w3-hover-light-blue w3-text-white w3-hover-text-white">
                Vybavení pokoje <i id="EquipmentArrow" class="fa-solid fa-angles-down"></i>
                <a href="#" id="AddNewRoomEquipment" class="w3-text-blue w3-right" style="text-decoration:none">Vytvořit nové vybavení pokoje</a>
            </button>

            <div id="EquipmentSelector" class="w3-container w3-hide">
                <div class="w3-row" id="roomEquipmentGrid" style="margin-bottom:128px">
                    @if (ViewData["RoomEquipmentOffer"] is List<RoomEquipment> roomEquipments)
                    {
                        int columnCount = 3; // Number of columns
                        int equipmentPerColumn = (int)Math.Ceiling((double)roomEquipments.Count / columnCount); // Calculate number of equipments per column

                        for (int columnIndex = 0; columnIndex < columnCount; columnIndex++)
                        {
                            <div class="w3-third">
                                @for (int i = 0; i < equipmentPerColumn; i++)
                                {
                                    int equipmentIndex = columnIndex * equipmentPerColumn + i;
                                    if (equipmentIndex < roomEquipments.Count)
                                    {
                                        var equipment = roomEquipments[equipmentIndex];
                                        var isChecked = equipment.IsDefault ? " checked" : "";
                                        <div class="w3-margin-bottom w3-tooltip">
                                            <input type="checkbox" id="@($"Equipment_{equipment.RoomEquipmentId}")" name="SelectedEquipments" value="@equipment.RoomEquipmentId" class="w3-check" @isChecked/>
                                            &nbsp;<label for="@($"Equipment_{equipment.RoomEquipmentId}")"><i class="@equipment.Icon"></i> @equipment.Name</label>
                                            <span style="position:absolute;left:0;bottom:2em;width:20em"
                                                  class="w3-text w3-tag w3-light-blue w3-round-large w3-small w3-animate-opacity">@equipment.Description</span>
                                        </div>
                                    }
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </p>

        <p>
            <button id="CalendarButton" class="w3-button w3-block w3-light-blue w3-left-align w3-hover-light-blue w3-text-white w3-hover-text-white">
                Nastavení možností ubytování <i id="CalendarArrow" class="fa-solid fa-angles-down"></i>
            </button>

            <div id="CalendarForm" class="w3-container w3-hide">
                <div class="w3-row" style="margin-bottom:128px">
                    @{
                        await Html.RenderPartialAsync("_CalendarPartial");
                    }
                    <p>Sem vytvořit formulář pro zadání ceny</p>
                </div>
            </div>
        </p>

        <button type="submit" class="w3-button w3-indigo w3-hover-blue w3-right">Vytvořit nový pokoj</button>
    }

    <div>
        <a asp-action="Index">Zpět na seznam pokojů</a>
    </div>

</div>

@await Html.PartialAsync("_AddRoomTypePartial", new RoomType())

@await Html.PartialAsync("_AddRoomEquipmentPartial", new RoomEquipment())

@section Head {
    <script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
    <script src="https://kit.fontawesome.com/3aeded1a52.js" crossorigin="anonymous"></script>
    <style>
        select#RoomEquipmentIcon {
            font-family: 'FontAwesome';
            font-size: 1.5em;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $("#AddNewRoomType").click(function (e) {
                e.preventDefault();
                $("#NewRoomTypeSection").toggle();
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $("#addRoomTypeForm").submit(function (e) {
                e.preventDefault();
                var form = $(this);

                // Clear previous errors
                $("#roomTypeErrors").empty();

                $.ajax({
                    url: form.attr("action"),
                    type: form.attr("method"),
                    data: form.serialize(),
                    success: function (data) {
                        if (data.success) {
                            // Close the modal and add the new room type to the dropdown
                            $("#NewRoomTypeSection").toggle();
                            $("#RoomTypeId").append(new Option(data.roomType, data.roomTypeId, false, true));
                        } else {
                            // Iterate through the error list and display them
                            if (data.errors && data.errors.length > 0) {
                                data.errors.forEach(function (error) {
                                    $("#roomTypeErrors").append($('<div>').text(error));
                                });
                            } else {
                                // Fallback error message
                                $("#roomTypeErrors").text(data.message);
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        // Handle server errors or unexpected responses here
                        console.error("Error during form submission:", error);
                    }
                });
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $("#EquipmentButton").click(function (e) {
                e.preventDefault();
                $("#EquipmentSelector").toggleClass("w3-hide w3-show");
                $("#EquipmentArrow").toggleClass("fa-angles-down fa-angles-up");
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $("#AddNewRoomEquipment").click(function (e) {
                e.preventDefault();
                $("#NewRoomEquipmentSection").toggle();
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $("#addRoomEquipmentForm").submit(function (e) {
                e.preventDefault();
                var form = $(this);

                // Clear previous errors
                $("#roomEquipmentErrors").empty();

                $.ajax({
                    url: form.attr("action"),
                    type: form.attr("method"),
                    data: form.serialize(),
                    success: function (data) {
                        if (data.success) {
                            // Close the modal
                            $("#NewRoomEquipmentSection").toggle();

                            // Create a new equipment div
                            var newEquipmentDiv = $('<div>').addClass('w3-margin-bottom w3-tooltip');
                            var isChecked = data.isDefault ? " checked" : "";
                            var input = $('<input>').attr({
                                type: 'checkbox',
                                id: 'Equipment_' + data.roomEquipmentId,
                                name: 'SelectedEquipments',
                                value: data.roomEquipmentId,
                                class: 'w3-check'
                            }).prop('checked', data.isDefault);

                            var label = $('<label>').attr('for', 'Equipment_' + data.roomEquipmentId).html('<i class="' + data.icon + '"></i> ' + data.name);
                            var span = $('<span>').attr({
                                style: 'position:absolute;left:0;bottom:2em;width:20em',
                                class: 'w3-text w3-tag w3-light-blue w3-round-large w3-small w3-animate-opacity'
                            }).text(data.description);

                            newEquipmentDiv.append(input).append(label).append(span);

                            // Find the column with the least number of equipments and add the new equipment
                            var minColumn = $("#roomEquipmentGrid .w3-third").sort(function (a, b) {
                                return $(a).children().length - $(b).children().length;
                            }).first();

                            minColumn.append(newEquipmentDiv);
                        } else {
                            // Handle validation errors or other failures
                            alert(data.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        // Handle server errors or unexpected responses here
                        console.error("Error during form submission:", error);
                    }
                });
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $("#CalendarButton").click(function (e) {
                e.preventDefault();
                $("#CalendarForm").toggleClass("w3-hide w3-show");
                $("#CalendarArrow").toggleClass("fa-angles-down fa-angles-up");
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            var monthNames = @Html.Raw(monthNamesJson);
            var currentYear = @currentYear;
            var currentMonth = @currentMonth; // Assuming this starts with the first month of the displayed 3-month range

            $('#prevMonth').click(function (e) {
                e.preventDefault();
                // Move back one month, considering year boundary
                if (currentMonth === 1) {
                    currentMonth = 12;
                    currentYear--;
                } else {
                    currentMonth--;
                }
                updateButtonLabels();
            });

            $('#nextMonth').click(function (e) {
                e.preventDefault();
                // Move forward one month, considering year boundary
                if (currentMonth === 12) {
                    currentMonth = 1;
                    currentYear++;
                } else {
                    currentMonth++;
                }
                updateButtonLabels();
            });

            function updateButtonLabels() {
                // Calculate previous and next month indices, considering the 3-month display
                var prevMonthIndex = currentMonth - 1;
                var nextMonthIndex = currentMonth + 3; // +3 because currentMonth is the start of the 3-month range

                var prevMonthYear = currentYear;
                var nextMonthYear = currentYear;

                // Adjust for year boundary
                if (prevMonthIndex < 1) {
                    prevMonthIndex += 12;
                    prevMonthYear--;
                }
                if (nextMonthIndex > 12) {
                    nextMonthIndex -= 12;
                    nextMonthYear++;
                }

                // Update button labels
                $('#prevMonth').html("&#8810; " + monthNames[prevMonthIndex - 1] + " " + prevMonthYear);
                $('#nextMonth').html(monthNames[nextMonthIndex - 1] + " " + nextMonthYear + "&#x226B;");

                // Adjust the visibility of the prevMonth button
                if (currentYear > @DateTime.Now.Year || (currentYear === @DateTime.Now.Year && currentMonth > @DateTime.Now.Month)) {
                    $('#prevMonth').removeClass("w3-hide");
                } else {
                    $('#prevMonth').addClass("w3-hide");
                }
            }

            updateButtonLabels(); // Initial call to set the button labels
        });
    </script>
}